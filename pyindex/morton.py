# -*- coding: utf-8 -*-

"""
This is the equivalent of the interleave2() and deinterleave2() you
find in interleave.py. These functions use lookup tables that are
(hopefully -- haven't tested performance yet) noticeably faster than
their counterparts.

These functions would benefit greatly from being rewritten in C or C++
although I am curious as to what kind of performance we can expect from
running this with PyPy.
"""

from __future__ import absolute_import

# Masks
UINT8 = 0xFF
UINT16 = 0xFFFF
UINT32 = 0xFFFFFFFF
UINT64 = 0xFFFFFFFFFFFFFFFF


MORTON_TABLE_256 = [
    # 256 entries morton table -- for 8 bits which will become 16
    0x0000, 0x0001, 0x0004, 0x0005, 0x0010, 0x0011, 0x0014, 0x0015,
    0x0040, 0x0041, 0x0044, 0x0045, 0x0050, 0x0051, 0x0054, 0x0055,
    0x0100, 0x0101, 0x0104, 0x0105, 0x0110, 0x0111, 0x0114, 0x0115,
    0x0140, 0x0141, 0x0144, 0x0145, 0x0150, 0x0151, 0x0154, 0x0155,
    0x0400, 0x0401, 0x0404, 0x0405, 0x0410, 0x0411, 0x0414, 0x0415,
    0x0440, 0x0441, 0x0444, 0x0445, 0x0450, 0x0451, 0x0454, 0x0455,
    0x0500, 0x0501, 0x0504, 0x0505, 0x0510, 0x0511, 0x0514, 0x0515,
    0x0540, 0x0541, 0x0544, 0x0545, 0x0550, 0x0551, 0x0554, 0x0555,
    0x1000, 0x1001, 0x1004, 0x1005, 0x1010, 0x1011, 0x1014, 0x1015,
    0x1040, 0x1041, 0x1044, 0x1045, 0x1050, 0x1051, 0x1054, 0x1055,
    0x1100, 0x1101, 0x1104, 0x1105, 0x1110, 0x1111, 0x1114, 0x1115,
    0x1140, 0x1141, 0x1144, 0x1145, 0x1150, 0x1151, 0x1154, 0x1155,
    0x1400, 0x1401, 0x1404, 0x1405, 0x1410, 0x1411, 0x1414, 0x1415,
    0x1440, 0x1441, 0x1444, 0x1445, 0x1450, 0x1451, 0x1454, 0x1455,
    0x1500, 0x1501, 0x1504, 0x1505, 0x1510, 0x1511, 0x1514, 0x1515,
    0x1540, 0x1541, 0x1544, 0x1545, 0x1550, 0x1551, 0x1554, 0x1555,
    0x4000, 0x4001, 0x4004, 0x4005, 0x4010, 0x4011, 0x4014, 0x4015,
    0x4040, 0x4041, 0x4044, 0x4045, 0x4050, 0x4051, 0x4054, 0x4055,
    0x4100, 0x4101, 0x4104, 0x4105, 0x4110, 0x4111, 0x4114, 0x4115,
    0x4140, 0x4141, 0x4144, 0x4145, 0x4150, 0x4151, 0x4154, 0x4155,
    0x4400, 0x4401, 0x4404, 0x4405, 0x4410, 0x4411, 0x4414, 0x4415,
    0x4440, 0x4441, 0x4444, 0x4445, 0x4450, 0x4451, 0x4454, 0x4455,
    0x4500, 0x4501, 0x4504, 0x4505, 0x4510, 0x4511, 0x4514, 0x4515,
    0x4540, 0x4541, 0x4544, 0x4545, 0x4550, 0x4551, 0x4554, 0x4555,
    0x5000, 0x5001, 0x5004, 0x5005, 0x5010, 0x5011, 0x5014, 0x5015,
    0x5040, 0x5041, 0x5044, 0x5045, 0x5050, 0x5051, 0x5054, 0x5055,
    0x5100, 0x5101, 0x5104, 0x5105, 0x5110, 0x5111, 0x5114, 0x5115,
    0x5140, 0x5141, 0x5144, 0x5145, 0x5150, 0x5151, 0x5154, 0x5155,
    0x5400, 0x5401, 0x5404, 0x5405, 0x5410, 0x5411, 0x5414, 0x5415,
    0x5440, 0x5441, 0x5444, 0x5445, 0x5450, 0x5451, 0x5454, 0x5455,
    0x5500, 0x5501, 0x5504, 0x5505, 0x5510, 0x5511, 0x5514, 0x5515,
    0x5540, 0x5541, 0x5544, 0x5545, 0x5550, 0x5551, 0x5554, 0x5555,
]


REVERSE_MORTON_TABLE_2x8 = [
    [
    # Reverse morton table for two 8 bits integers from one 16 bits.
    0x0000, 0x0001, 0x0100, 0x0101, 0x0002, 0x0003, 0x0102, 0x0103,
    0x0200, 0x0201, 0x0300, 0x0301, 0x0202, 0x0203, 0x0302, 0x0303,
    0x0004, 0x0005, 0x0104, 0x0105, 0x0006, 0x0007, 0x0106, 0x0107,
    0x0204, 0x0205, 0x0304, 0x0305, 0x0206, 0x0207, 0x0306, 0x0307,
    0x0400, 0x0401, 0x0500, 0x0501, 0x0402, 0x0403, 0x0502, 0x0503,
    0x0600, 0x0601, 0x0700, 0x0701, 0x0602, 0x0603, 0x0702, 0x0703,
    0x0404, 0x0405, 0x0504, 0x0505, 0x0406, 0x0407, 0x0506, 0x0507,
    0x0604, 0x0605, 0x0704, 0x0705, 0x0606, 0x0607, 0x0706, 0x0707,
    0x0008, 0x0009, 0x0108, 0x0109, 0x000A, 0x000B, 0x010A, 0x010B,
    0x0208, 0x0209, 0x0308, 0x0309, 0x020A, 0x020B, 0x030A, 0x030B,
    0x000C, 0x000D, 0x010C, 0x010D, 0x000E, 0x000F, 0x010E, 0x010F,
    0x020C, 0x020D, 0x030C, 0x030D, 0x020E, 0x020F, 0x030E, 0x030F,
    0x0408, 0x0409, 0x0508, 0x0509, 0x040A, 0x040B, 0x050A, 0x050B,
    0x0608, 0x0609, 0x0708, 0x0709, 0x060A, 0x060B, 0x070A, 0x070B,
    0x040C, 0x040D, 0x050C, 0x050D, 0x040E, 0x040F, 0x050E, 0x050F,
    0x060C, 0x060D, 0x070C, 0x070D, 0x060E, 0x060F, 0x070E, 0x070F,
    0x0800, 0x0801, 0x0900, 0x0901, 0x0802, 0x0803, 0x0902, 0x0903,
    0x0A00, 0x0A01, 0x0B00, 0x0B01, 0x0A02, 0x0A03, 0x0B02, 0x0B03,
    0x0804, 0x0805, 0x0904, 0x0905, 0x0806, 0x0807, 0x0906, 0x0907,
    0x0A04, 0x0A05, 0x0B04, 0x0B05, 0x0A06, 0x0A07, 0x0B06, 0x0B07,
    0x0C00, 0x0C01, 0x0D00, 0x0D01, 0x0C02, 0x0C03, 0x0D02, 0x0D03,
    0x0E00, 0x0E01, 0x0F00, 0x0F01, 0x0E02, 0x0E03, 0x0F02, 0x0F03,
    0x0C04, 0x0C05, 0x0D04, 0x0D05, 0x0C06, 0x0C07, 0x0D06, 0x0D07,
    0x0E04, 0x0E05, 0x0F04, 0x0F05, 0x0E06, 0x0E07, 0x0F06, 0x0F07,
    0x0808, 0x0809, 0x0908, 0x0909, 0x080A, 0x080B, 0x090A, 0x090B,
    0x0A08, 0x0A09, 0x0B08, 0x0B09, 0x0A0A, 0x0A0B, 0x0B0A, 0x0B0B,
    0x080C, 0x080D, 0x090C, 0x090D, 0x080E, 0x080F, 0x090E, 0x090F,
    0x0A0C, 0x0A0D, 0x0B0C, 0x0B0D, 0x0A0E, 0x0A0F, 0x0B0E, 0x0B0F,
    0x0C08, 0x0C09, 0x0D08, 0x0D09, 0x0C0A, 0x0C0B, 0x0D0A, 0x0D0B,
    0x0E08, 0x0E09, 0x0F08, 0x0F09, 0x0E0A, 0x0E0B, 0x0F0A, 0x0F0B,
    0x0C0C, 0x0C0D, 0x0D0C, 0x0D0D, 0x0C0E, 0x0C0F, 0x0D0E, 0x0D0F,
    0x0E0C, 0x0E0D, 0x0F0C, 0x0F0D, 0x0E0E, 0x0E0F, 0x0F0E, 0x0F0F,
    ],
    [
    0x0000, 0x0010, 0x1000, 0x1010, 0x0020, 0x0030, 0x1020, 0x1030,
    0x2000, 0x2010, 0x3000, 0x3010, 0x2020, 0x2030, 0x3020, 0x3030,
    0x0040, 0x0050, 0x1040, 0x1050, 0x0060, 0x0070, 0x1060, 0x1070,
    0x2040, 0x2050, 0x3040, 0x3050, 0x2060, 0x2070, 0x3060, 0x3070,
    0x4000, 0x4010, 0x5000, 0x5010, 0x4020, 0x4030, 0x5020, 0x5030,
    0x6000, 0x6010, 0x7000, 0x7010, 0x6020, 0x6030, 0x7020, 0x7030,
    0x4040, 0x4050, 0x5040, 0x5050, 0x4060, 0x4070, 0x5060, 0x5070,
    0x6040, 0x6050, 0x7040, 0x7050, 0x6060, 0x6070, 0x7060, 0x7070,
    0x0080, 0x0090, 0x1080, 0x1090, 0x00A0, 0x00B0, 0x10A0, 0x10B0,
    0x2080, 0x2090, 0x3080, 0x3090, 0x20A0, 0x20B0, 0x30A0, 0x30B0,
    0x00C0, 0x00D0, 0x10C0, 0x10D0, 0x00E0, 0x00F0, 0x10E0, 0x10F0,
    0x20C0, 0x20D0, 0x30C0, 0x30D0, 0x20E0, 0x20F0, 0x30E0, 0x30F0,
    0x4080, 0x4090, 0x5080, 0x5090, 0x40A0, 0x40B0, 0x50A0, 0x50B0,
    0x6080, 0x6090, 0x7080, 0x7090, 0x60A0, 0x60B0, 0x70A0, 0x70B0,
    0x40C0, 0x40D0, 0x50C0, 0x50D0, 0x40E0, 0x40F0, 0x50E0, 0x50F0,
    0x60C0, 0x60D0, 0x70C0, 0x70D0, 0x60E0, 0x60F0, 0x70E0, 0x70F0,
    0x8000, 0x8010, 0x9000, 0x9010, 0x8020, 0x8030, 0x9020, 0x9030,
    0xA000, 0xA010, 0xB000, 0xB010, 0xA020, 0xA030, 0xB020, 0xB030,
    0x8040, 0x8050, 0x9040, 0x9050, 0x8060, 0x8070, 0x9060, 0x9070,
    0xA040, 0xA050, 0xB040, 0xB050, 0xA060, 0xA070, 0xB060, 0xB070,
    0xC000, 0xC010, 0xD000, 0xD010, 0xC020, 0xC030, 0xD020, 0xD030,
    0xE000, 0xE010, 0xF000, 0xF010, 0xE020, 0xE030, 0xF020, 0xF030,
    0xC040, 0xC050, 0xD040, 0xD050, 0xC060, 0xC070, 0xD060, 0xD070,
    0xE040, 0xE050, 0xF040, 0xF050, 0xE060, 0xE070, 0xF060, 0xF070,
    0x8080, 0x8090, 0x9080, 0x9090, 0x80A0, 0x80B0, 0x90A0, 0x90B0,
    0xA080, 0xA090, 0xB080, 0xB090, 0xA0A0, 0xA0B0, 0xB0A0, 0xB0B0,
    0x80C0, 0x80D0, 0x90C0, 0x90D0, 0x80E0, 0x80F0, 0x90E0, 0x90F0,
    0xA0C0, 0xA0D0, 0xB0C0, 0xB0D0, 0xA0E0, 0xA0F0, 0xB0E0, 0xB0F0,
    0xC080, 0xC090, 0xD080, 0xD090, 0xC0A0, 0xC0B0, 0xD0A0, 0xD0B0,
    0xE080, 0xE090, 0xF080, 0xF090, 0xE0A0, 0xE0B0, 0xF0A0, 0xF0B0,
    0xC0C0, 0xC0D0, 0xD0C0, 0xD0D0, 0xC0E0, 0xC0F0, 0xD0E0, 0xD0F0,
    0xE0C0, 0xE0D0, 0xF0C0, 0xF0D0, 0xE0E0, 0xE0F0, 0xF0E0, 0xF0F0,
    ]
]


def interleave_16(x, y):
    """
    Interleaves two 8-bit integers together into one 16-bit integer.
    """
    x &= UINT8
    y &= UINT8

    return int(
        MORTON_TABLE_256[x & UINT8] << 1 | \
        MORTON_TABLE_256[y & UINT8]
    ) & UINT16


def interleave_32(x, y):
    """
    Interleaves two 16-bit integers together into one 32-bit integer.
    """
    x &= UINT16
    y &= UINT16

    return int(
        # Upper 8 bits of each
        MORTON_TABLE_256[(x >> 8) & UINT8] << 17 | \
        MORTON_TABLE_256[(y >> 8) & UINT8] << 16 | \
        # Lower 8 bits of each
        MORTON_TABLE_256[x & UINT8] << 1 | \
        MORTON_TABLE_256[y & UINT8]
    ) & UINT32


def interleave_64(x, y):
    """
    Interleaves two 32-bit integers together into one 64 bit integer.
    """
    x &= UINT32
    y &= UINT32

    return int(
        # Bits 24-31
        MORTON_TABLE_256[(x >> 24) & UINT8] << 49 | \
        MORTON_TABLE_256[(y >> 24) & UINT8] << 48 | \
        # Bits 16-23
        MORTON_TABLE_256[(x >> 16) & UINT8] << 33 | \
        MORTON_TABLE_256[(y >> 16) & UINT8] << 32 | \
        # Bits 8-15
        MORTON_TABLE_256[(x >> 8) & UINT8] << 17 | \
        MORTON_TABLE_256[(y >> 8) & UINT8] << 16 | \
        # Bits 0-7
        MORTON_TABLE_256[x & UINT8] << 1 | \
        MORTON_TABLE_256[y & UINT8]
    )# & UINT64


def deinterleave_16(n):
    """
    Deinterleaves a 16-bit integer into two 8-bit integers using a Morton
    lookup table.

    Adapted from the zSNES project:
    https://github.com/klange/snes9x-sdl/blob/master/spc7110dec.cpp
    """
    # Bits: from -> to
    # 15, 13, 11, 9, 7, 5, 3, 1 -> 15-8
    # 14, 12, 10, 8, 6, 4, 2, 0 -> 7-0
    reversed = (REVERSE_MORTON_TABLE_2x8[0][(n >> 0) & UINT8] & UINT16) + \
               (REVERSE_MORTON_TABLE_2x8[1][(n >> 8) & UINT8] & UINT16)

    # Returning a tuple of both integers
    return (reversed >> 8) & UINT8, reversed & UINT8


def deinterleave_32(n):
    """
    Deinterleaves a 32-bit integer into two 16-bit integers using a Morton
    lookup table.
    """
    lower = deinterleave_16(n)
    upper = deinterleave_16(n >> 16)

    return (
        ((upper[0] << 8) | lower[0]) & UINT16,
        ((upper[1] << 8) | lower[1]) & UINT16
    )


def deinterleave_64(n):
    """
    Deinterleaves a 64 integer into two 32-bit integers using a Morton
    lookup table.
    """
    a = deinterleave_16(n)
    b = deinterleave_16(n >> 16)
    c = deinterleave_16(n >> 32)
    d = deinterleave_16(n >> 48)

    return (
        ((d[0] << 24) | (c[0] << 16) | (b[0] << 8) | a[0]) & UINT32,
        ((d[1] << 24) | (c[1] << 16) | (b[1] << 8) | a[1]) & UINT32
    )
